---

###################
### Custom Repo ###
###################
- name: Determine upstream Ubuntu codename for PPAs
  ansible.builtin.set_fact:
    upstream_codename: >-
      {{ upstream_codename_map[
           (
             ansible_facts['distribution']
               | lower
               | replace(' ', '_')
           ) ~ '_' ~
           ansible_facts.lsb.major_release
         ]
         | default(ansible_facts.lsb.codename) }}

- name: Cleanup any legacy underscore-named repo lists
  become: true
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/{{ item.id }}.list"
    state: absent
  loop: "{{ essential_programs.debian.repos }}"
  loop_control:
    label: "{{ item.id }}"

- name: Configure APT repositories in bulk
  ansible.builtin.include_tasks:
    file: add-debian-repo.yml
    apply:
      become: true
  loop: "{{ essential_programs.debian.repos }}"
  loop_control:
    label: "{{ item.id }}"
  vars:
    repo: "{{ item }}"

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 0
  become: true

- name: Install custom Debian repository packages
  ansible.builtin.apt:
    name: "{{ item.name }}"
    state: present
    install_recommends: true
  loop: "{{ essential_programs.debian.repos }}"
  loop_control:
    label: "{{ item.id }}"
  become: true

###################
##### Flatpak #####
###################
- name: Install Flatpak apps
  community.general.flatpak:
    name: "{{ essential_programs.flatpak }}"
    state: present
    remote: flathub
    method: system
  become: true

###################
# Common Programs #
###################
- name: Install common programs on Debian-based
  ansible.builtin.apt:
    name: "{{ essential_programs.common }}"
    state: present
    install_recommends: false
  become: true

#######################
## JetBrains Toolbox ##
#######################
# Source: https://github.com/nagygergo/jetbrains-toolbox-install
- name: Fetch JetBrains Toolbox release info
  ansible.builtin.uri:
    url: "{{ essential_programs.debian.jetbrains_toolbox.release_url }}"
    return_content: true
  register: jetbrains_toolbox_release

- name: Set JetBrains Toolbox download URL
  ansible.builtin.set_fact:
    jetbrains_toolbox_url: "{{ jetbrains_toolbox_release.json.TBA[0].downloads.linux.link }}"

- name: Determine JetBrains Toolbox archive tmp path from URL
  ansible.builtin.set_fact:
    toolbox_archive_tmp_path: "/tmp/{{ jetbrains_toolbox_url | basename }}"

- name: Download JetBrains Toolbox archive
  ansible.builtin.get_url:
    url: "{{ jetbrains_toolbox_url }}"
    dest: "{{ toolbox_archive_tmp_path }}"
    mode: '0644'

- name: Create JetBrains Toolbox install dir
  ansible.builtin.file:
    path: "{{ essential_programs.debian.jetbrains_toolbox.install_path }}"
    state: directory
    mode: '0755'

- name: Extract JetBrains Toolbox
  ansible.builtin.unarchive:
    src: "{{ toolbox_archive_tmp_path }}"
    dest: "{{ essential_programs.debian.jetbrains_toolbox.install_path }}"
    remote_src: true
    extra_opts: ['--strip-components=1']

- name: Make JetBrains Toolbox binary executable
  ansible.builtin.file:
    path: "{{ essential_programs.debian.jetbrains_toolbox.executable_path }}"
    mode: '0755'

- name: Ensure user local bin directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/bin"
    state: directory
    mode: '0755'

- name: Symlink JetBrains Toolbox to local bin
  ansible.builtin.file:
    src: "{{ essential_programs.debian.jetbrains_toolbox.executable_path }}"
    dest: "{{ ansible_env.HOME }}/.local/bin/jetbrains-toolbox"
    state: link

- name: Clean up JetBrains Toolbox downloaded archive
  ansible.builtin.file:
    path: "{{ toolbox_archive_tmp_path }}"
    state: absent

### Register JetBrains Toolbox in Desktop
- name: Ensure local applications dir exists
  ansible.builtin.file:
    path: "{{ essential_programs.debian.jetbrains_toolbox.applications_path }}"
    state: directory
    mode: '0755'

- name: Install JetBrains Toolbox desktop entry
  ansible.builtin.template:
    src: "jetbrains-toolbox.desktop.j2"
    dest: "{{ essential_programs.debian.jetbrains_toolbox.applications_path }}/jetbrains-toolbox.desktop"
    mode: '0644'
  vars:
    toolbox_bin: "{{ essential_programs.debian.jetbrains_toolbox.executable_path }}"
    toolbox_icon: "{{ essential_programs.debian.jetbrains_toolbox.install_path }}/bin/toolbox-tray-color.png"

- name: Update desktop database for JetBrains Toolbox
  ansible.builtin.command:
    cmd: update-desktop-database "{{ essential_programs.debian.jetbrains_toolbox.applications_path }}"
  changed_when: false

###############
## Mockoon  ##
###############
- name: Get latest Mockoon release from GitHub API
  ansible.builtin.uri:
    url: "https://api.github.com/repos/mockoon/mockoon/releases/latest"
    method: GET
    return_content: true
  register: mockoon_release_info

- name: Set mockoon versions name
  ansible.builtin.set_fact:
    mockoon_version: "{{ mockoon_release_info.json.tag_name }}"
    mockoon_version_simplified: "{{ mockoon_release_info.json.tag_name | regex_replace('^v', '') }}"

- name: Set Mockoon download URL
  ansible.builtin.set_fact:
    mockoon_deb_url: "https://github.com/mockoon/mockoon/releases/download/{{ mockoon_version }}/mockoon-{{ mockoon_version_simplified }}.amd64.deb"

- name: Download Mockoon .deb package
  ansible.builtin.get_url:
    url: "{{ mockoon_deb_url }}"
    dest: "/tmp/mockoon-{{ mockoon_version_simplified }}.amd64.deb"
    mode: '0644'

- name: Install Mockoon from .deb package
  ansible.builtin.apt:
    deb: "/tmp/mockoon-{{ mockoon_version_simplified }}.amd64.deb"
    state: present
  become: true

- name: Remove downloaded Mockoon .deb package
  ansible.builtin.file:
    path: "/tmp/mockoon-{{ mockoon_version_simplified }}.amd64.deb"
    state: absent

###############
## Postman  ##
###############
- name: Set Postman archive tmp path
  ansible.builtin.set_fact:
    postman_archive_tmp_path: "/tmp/postman-linux-x64.tar.gz"

- name: Download Postman archive
  ansible.builtin.get_url:
    url: "{{ essential_programs.debian.postman.download_url }}"
    dest: "{{ postman_archive_tmp_path }}"
    mode: '0644'

- name: Create Postman install dir
  ansible.builtin.file:
    path: "{{ essential_programs.debian.postman.install_path }}"
    state: directory
    mode: '0755'

- name: Extract Postman
  ansible.builtin.unarchive:
    src: "{{ postman_archive_tmp_path }}"
    dest: "{{ essential_programs.debian.postman.install_path }}"
    remote_src: true
    extra_opts: ['--strip-components=1']

- name: Make Postman binary executable
  ansible.builtin.file:
    path: "{{ essential_programs.debian.postman.executable_path }}"
    mode: '0755'

- name: Ensure user local bin directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/bin"
    state: directory
    mode: '0755'

- name: Symlink Postman to local bin
  ansible.builtin.file:
    src: "{{ essential_programs.debian.postman.executable_path }}"
    dest: "{{ ansible_env.HOME }}/.local/bin/postman"
    state: link

- name: Clean up Postman downloaded archive
  ansible.builtin.file:
    path: "{{ postman_archive_tmp_path }}"
    state: absent

### Register Postman in Desktop
- name: Ensure local applications dir exists
  ansible.builtin.file:
    path: "{{ essential_programs.debian.postman.applications_path }}"
    state: directory
    mode: '0755'

- name: Install Postman desktop entry
  ansible.builtin.template:
    src: "postman.desktop.j2"
    dest: "{{ essential_programs.debian.postman.applications_path }}/Postman.desktop"
    mode: '0644'
  vars:
    postman_bin: "{{ essential_programs.debian.postman.executable_path }}"
    postman_icon: "{{ essential_programs.debian.postman.icon_path }}"

- name: Update desktop database for Postman
  ansible.builtin.command:
    cmd: update-desktop-database "{{ essential_programs.debian.postman.applications_path }}"
  changed_when: false

##################
### VirtualBox ###
##################
# VirtualBox is installed via custom repository that follows the standard repository pattern

- name: Get VirtualBox version
  ansible.builtin.command:
    cmd: vboxmanage -v
  register: vbox_version_output
  changed_when: false
  failed_when: false

- name: Set VirtualBox version fact
  ansible.builtin.set_fact:
    vbox_version: "{{ vbox_version_output.stdout | regex_replace('r.*$', '') }}"
  when: vbox_version_output.rc == 0

- name: Download VirtualBox Extension Pack
  ansible.builtin.command:
    cmd: >-
      wget -O /tmp/Oracle_VirtualBox_Extension_Pack-{{ vbox_version }}.vbox-extpack
      https://download.virtualbox.org/virtualbox/{{ vbox_version }}/
      Oracle_VirtualBox_Extension_Pack-{{ vbox_version }}.vbox-extpack
    creates: "/tmp/Oracle_VirtualBox_Extension_Pack-{{ vbox_version }}.vbox-extpack"
  when: vbox_version is defined
  # noqa: command-instead-of-module

- name: Install VirtualBox Extension Pack
  ansible.builtin.command:
    cmd: vboxmanage extpack install --replace /tmp/Oracle_VirtualBox_Extension_Pack-{{ vbox_version }}.vbox-extpack
  become: true
  register: extpack_install
  changed_when: "'Successfully installed' in extpack_install.stdout"
  failed_when: "extpack_install.rc != 0 and 'already installed' not in extpack_install.stderr"
  when: vbox_version is defined

- name: Clean up VirtualBox Extension Pack download
  ansible.builtin.file:
    path: "/tmp/Oracle_VirtualBox_Extension_Pack-{{ vbox_version }}.vbox-extpack"
    state: absent
  when: vbox_version is defined

###############
## HandBrake ##
###############
- name: Ensure HandBrake config directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.config/HandBrake"
    state: directory
    mode: '0755'

- name: Copy HandBrake anime preset
  ansible.builtin.copy:
    src: "handbrake_anime20_presets.json"
    dest: "{{ ansible_env.HOME }}/.config/HandBrake/handbrake_anime20_presets.json"
    mode: '0644'
  become: true
